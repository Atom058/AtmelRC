
atmelrc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000150  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000050  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000cd  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000074  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000126  00000000  00000000  00000301  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a6  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	10 d0       	rcall	.+32     	; 0x5c <main>
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <setup>:

}

void setup(void){

	cli(); //Disable interrupts temoprarily
  40:	f8 94       	cli

	//Setup of the two input pins, adding interrupts
	
		//Interrupts
		GIMSK |= (1<<PCIE);
  42:	8b b7       	in	r24, 0x3b	; 59
  44:	80 62       	ori	r24, 0x20	; 32
  46:	8b bf       	out	0x3b, r24	; 59
		PCMSK = (1<<PCINT3) | (1<<PCINT4);
  48:	88 e1       	ldi	r24, 0x18	; 24
  4a:	85 bb       	out	0x15, r24	; 21

		//Output pins - resetting everything!
		PORTB = 0;
  4c:	18 ba       	out	0x18, r1	; 24
		DDRB = 0;
  4e:	17 ba       	out	0x17, r1	; 23
		//Enable pullup on pin7/PB2
		PORTB |= (1<<PB2);
  50:	c2 9a       	sbi	0x18, 2	; 24


	//Setup of output pins
		DDRB |= (1<<DDB0) | (1<<DDB1);
  52:	87 b3       	in	r24, 0x17	; 23
  54:	83 60       	ori	r24, 0x03	; 3
  56:	87 bb       	out	0x17, r24	; 23

	//Setup of PWM modes

	sei(); //Enable interrupts again
  58:	78 94       	sei

}
  5a:	08 95       	ret

0000005c <main>:
uint8_t pb3_state = 0;
uint8_t pb4_state = 0;

int main (void) {

	setup();
  5c:	f1 df       	rcall	.-30     	; 0x40 <setup>
  5e:	ff cf       	rjmp	.-2      	; 0x5e <main+0x2>

00000060 <__vector_2>:
	sei(); //Enable interrupts again

}

//Interrupt vectors
ISR ( PCINT0_vect ) {
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	2f 93       	push	r18
  6c:	3f 93       	push	r19
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
	
	//To test: Toggle the corresponding ports of input/output

	if( (PINB>>PINB3) & ~(pb3_state) ){
  72:	26 b3       	in	r18, 0x16	; 22
  74:	80 91 60 00 	lds	r24, 0x0060
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	80 95       	com	r24
  7c:	90 95       	com	r25
  7e:	26 95       	lsr	r18
  80:	26 95       	lsr	r18
  82:	26 95       	lsr	r18
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	82 23       	and	r24, r18
  88:	93 23       	and	r25, r19
  8a:	89 2b       	or	r24, r25
  8c:	49 f0       	breq	.+18     	; 0xa0 <__vector_2+0x40>
		//IF PB3 has changed

		//record new state of pb3
		pb3_state = (PINB>>PINB3) & 1;
  8e:	86 b3       	in	r24, 0x16	; 22
  90:	86 95       	lsr	r24
  92:	86 95       	lsr	r24
  94:	86 95       	lsr	r24
  96:	81 70       	andi	r24, 0x01	; 1
  98:	80 93 60 00 	sts	0x0060, r24

		//Toggle pin 0
		PORTB |= (1<<PB0);
  9c:	c0 9a       	sbi	0x18, 0	; 24
  9e:	13 c0       	rjmp	.+38     	; 0xc6 <__vector_2+0x66>

	} else if ( (PINB>>PINB4) & ~(pb4_state) ){
  a0:	26 b3       	in	r18, 0x16	; 22
  a2:	80 91 61 00 	lds	r24, 0x0061
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	80 95       	com	r24
  aa:	90 95       	com	r25
  ac:	22 95       	swap	r18
  ae:	2f 70       	andi	r18, 0x0F	; 15
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	82 23       	and	r24, r18
  b4:	93 23       	and	r25, r19
  b6:	89 2b       	or	r24, r25
  b8:	31 f0       	breq	.+12     	; 0xc6 <__vector_2+0x66>
		//IF PB4 has changed

		//record new state of pb3
		pb4_state = (PINB>>PINB4) & 1;
  ba:	86 b3       	in	r24, 0x16	; 22
  bc:	82 95       	swap	r24
  be:	81 70       	andi	r24, 0x01	; 1
  c0:	80 93 61 00 	sts	0x0061, r24

		//Toggle pin 0
		PORTB |= (1<<PB1);
  c4:	c1 9a       	sbi	0x18, 1	; 24

	}

  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
